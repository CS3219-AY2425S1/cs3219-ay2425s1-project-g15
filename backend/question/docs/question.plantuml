@startuml Question Service

entity Question {
  + questionId : number
  + title : string
  + description : string
  + complexity : string
  + category : Array<string>
  + hints: string
  + examples: Example[]
  + solution: string
}

entity Example {
  + example_num: number
  + expected_input: string
  + expected_output: string
  + explanation: string
}

entity EditQuestion {
  + title : string
  + description : string
  + complexity : string
  + category : Array<string>
  + hints: string
  + examples: Example[]
  + solution: string
}

entity Pagination {
  + pagination : number = 1
  + pageSize : number = 10
}

interface IQuestionServiceAPI {
  + GET /
  + POST /create [createQuestion: EditQuestion]
  + POST /all [pagination: Pagination, title: string, complexity: string[], category: string[]]
  + POST /all-ids [questionIds: number[]]
  + GET /{id}
  + POST /{id}/update [updateQuestion: EditQuestion]
  + POST /{id}/delete
  + POST /count-question [complexity: string[], category: string[]]
  + POST /pick-question [complexity: string[], category: string[]]
}

note right of IQuestionServiceAPI
  - GET /: Check service status
  - POST /create: Create a new question
  - POST /all: Retrieve all questions with pagination (Supports filtering by title, complexiy and category)
  - POST /all-ids: Retrieve questions based on a list of question ids
  - GET /{id}: Retrieve a specific question by ID
  - POST /{id}/update: Update a specific question by ID
  - POST /{id}/delete: Delete a specific question by ID
  - POST /count-question: Count non-deleted questions given a list of complexities and categories
  - POST /pick-question: Pick a random question given a list of complexities and categories
end note

class QuestionService {
}

entity QuestionDatabase {
  + questions: Array<Question>
}

QuestionService ..|> IQuestionServiceAPI : implements
QuestionService --> QuestionDatabase : interacts with

@enduml